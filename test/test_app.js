// Generated by CoffeeScript 1.8.0
(function() {
  var app, db, repl, request;

  request = require('supertest');

  repl = require('repl');

  app = require('../app').app;

  db = require('../db').db;

  describe('GET, SET, APPEND', function() {
    db.flushall();
    it('GET returns an empty response', function(done) {
      return request(app).get('/get/foobar').expect(200).expect("", done);
    });
    it('SET returns true', function(done) {
      return request(app).post('/set/foobar').send('baz').expect(200).expect("true", done);
    });
    it('GET returns the stored value', function(done) {
      return request(app).get('/get/foobar').expect(200).expect("baz", done);
    });
    it('APPEND returns true', function(done) {
      return request(app).post('/append/foobar').send('quux').expect("true", done);
    });
    return it('GET returns the appended value', function(done) {
      return request(app).get('/get/foobar').expect("bazquux", done);
    });
  });

  describe('LPUSH, LRANGE', function() {
    db.flushall();
    it('LRANGE needs args', function(done) {
      return request(app).get('/lrange/baz').expect(500).expect(/wrong number of arguments/, done);
    });
    it('LRANGE returns empty list', function(done) {
      return request(app).get('/lrange/baz?args=0,-1').expect('[]', done);
    });
    it('LPUSH returns true', function(done) {
      return request(app).post('/lpush/baz').send('rawness').expect('true', done);
    });
    return it('LRANGE returns the value', function(done) {
      return request(app).get('/lrange/baz?args=0,1').expect('["rawness"]', done);
    });
  });

}).call(this);
