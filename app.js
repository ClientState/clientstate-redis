// Generated by CoffeeScript 1.8.0
(function() {
  var GET_COMMANDS, GITHUB_AUTH_HASH, GITHUB_TOKEN_SET, POST_COMMANDS, RESTRICTED_KEYS, app, db, express, favicon, https, querystring, repl, start_repl,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require("express");

  repl = require("repl");

  favicon = require("serve-favicon");

  https = require("https");

  querystring = require("querystring");

  db = require("./db").db;

  start_repl = require("./repl").start_repl;

  app = express();

  app.use(favicon("" + __dirname + "/public/favicon.ico"));

  app.use(function(req, res, next) {
    var data;
    data = '';
    req.setEncoding('utf8');
    req.on('data', function(chunk) {
      return data += chunk;
    });
    return req.on('end', function() {
      req.rawBody = data;
      return next();
    });
  });

  GITHUB_TOKEN_SET = "__github_token_set";

  GITHUB_AUTH_HASH = "__github_auth_hash";

  RESTRICTED_KEYS = [GITHUB_TOKEN_SET, GITHUB_AUTH_HASH];

  app.get('/auth_callback', function(req, res) {
    var cb, client_id, client_secret, code, options, post_data;
    code = req.query.code;
    client_id = process.env.GITHUB_CLIENT_ID;
    client_secret = process.env.GITHUB_CLIENT_SECRET;
    console.log(code, client_id, client_secret);
    post_data = querystring.stringify({
      code: code,
      client_id: client_id,
      client_secret: client_secret
    });
    options = {
      method: 'POST',
      host: 'github.com',
      path: '/login/oauth/access_token',
      headers: {
        "User-Agent": "skyl/hello-express",
        "Accept": "application/json"
      }
    };
    cb = function(gh_response) {
      var str;
      console.log("POST callback!");
      str = '';
      gh_response.on('data', function(chunk) {
        return str += chunk;
      });
      return gh_response.on('end', function() {
        var access_token, user_req;
        console.log(str);
        if (gh_response.statusCode === 200) {
          console.log("SAVING FROM GITHUB!");
          access_token = JSON.parse(str).access_token;
          db.sadd(GITHUB_TOKEN_SET, access_token);
          options = {
            host: 'api.github.com',
            path: "/user?access_token=" + access_token,
            headers: {
              "User-Agent": "skyl/hello-express"
            }
          };
          user_req = https.request(options, function(gh_response) {
            str = '';
            gh_response.on('data', function(chunk) {
              return str += chunk;
            });
            return gh_response.on('end', function() {
              console.log(str);
              return db.hset(GITHUB_AUTH_HASH, access_token, str);
            });
          });
          user_req.end();
          res.status(200).write("OK");
          return res.send();
        } else {
          res.status(403).write("Invalid");
          return res.send();
        }
      });
    };
    req = https.request(options, cb);
    req.write(post_data);
    return req.end();
  });

  app.use(function(req, res, next) {
    var key;
    key = req.param("key");
    if (__indexOf.call(RESTRICTED_KEYS, key) >= 0) {
      res.status(403).write("no.");
      return res.send();
    }
    return next();
  });

  app.use(function(req, res, next) {
    var token;
    token = req.query["access_token"] || req.headers["access_token"];
    if (token == null) {
      res.status(403).write("Invalid Access Token");
      return res.send();
    }
    return db.sismember(GITHUB_TOKEN_SET, token, function(err, ismemberres) {
      if (err != null) {
        res.status(500).write(err.toString());
        return res.send();
      }
      if (ismemberres === 1) {
        next();
      } else {
        res.status(403).write("Invalid");
        return res.send();
      }
    });
  });

  GET_COMMANDS = ["EXISTS", "DUMP", "GET", "LRANGE", "HGET", "HLEN", "HKEYS"];

  app.get('/:command/:key', function(req, res) {
    var args, c, field, key, retrn, _ref;
    c = req.param("command");
    key = req.param("key");
    if (__indexOf.call(RESTRICTED_KEYS, key) >= 0) {
      res.status(403).write("no.");
      return res.send();
    }
    field = req.query.field;
    if (_ref = c.toUpperCase(), __indexOf.call(GET_COMMANDS, _ref) < 0) {
      res.status(400).write("unsupported command");
      return res.send();
    }
    retrn = function(err, dbres) {
      if (!err) {
        if (parseInt(dbres) === dbres) {
          dbres = dbres + "";
        }
        return res.send(dbres);
      } else {
        res.status(500);
        return res.send(err.toString());
      }
    };
    if (field != null) {
      args = [key, field];
    } else {
      args = [key];
    }
    if (req.query.args != null) {
      args.push.apply(args, req.query.args.split(','));
    }
    args.push(retrn);
    return db[c].apply(db, args);
  });

  POST_COMMANDS = ["DEL", "APPEND", "SET", "LPUSH", "HSET"];

  app.post('/:command/:key', function(req, res) {
    var args, c, field, key, retrn, v, _ref;
    c = req.param("command");
    key = req.param("key");
    field = req.query.field;
    v = req.rawBody;
    if (_ref = c.toUpperCase(), __indexOf.call(POST_COMMANDS, _ref) < 0) {
      res.status(400).write("unsupported command");
      return res.send();
    }
    retrn = function(err, dbres) {
      if (!err) {
        return res.send("true");
      } else {
        res.status(500);
        return res.send(err.toString());
      }
    };
    if (field != null) {
      args = [key, field, v, retrn];
    } else {
      args = [key, v, retrn];
    }
    return db[c].apply(db, args);
  });

  module.exports.app = app;

  module.exports.GITHUB_TOKEN_SET = GITHUB_TOKEN_SET;

  module.exports.GITHUB_AUTH_HASH = GITHUB_AUTH_HASH;

}).call(this);
