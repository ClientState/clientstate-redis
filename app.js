// Generated by CoffeeScript 1.8.0
(function() {
  var GET_COMMANDS, POST_COMMANDS, app, db, express, favicon, repl, start_repl,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require("express");

  repl = require("repl");

  favicon = require("serve-favicon");

  db = require("./db").db;

  start_repl = require("./repl").start_repl;

  app = express();

  app.use(favicon("" + __dirname + "/public/favicon.ico"));

  app.use(function(req, res, next) {
    var data;
    data = '';
    req.setEncoding('utf8');
    req.on('data', function(chunk) {
      return data += chunk;
    });
    return req.on('end', function() {
      req.rawBody = data;
      return next();
    });
  });

  GET_COMMANDS = ["GET", "LRANGE", "HGET", "HLEN", "HKEYS"];

  app.get('/:command/:key', function(req, res) {
    var args, c, field, key, retrn, _ref;
    c = req.param("command");
    key = req.param("key");
    field = req.query.field;
    if (_ref = c.toUpperCase(), __indexOf.call(GET_COMMANDS, _ref) < 0) {
      res.status(400).write("unsupported command");
      return res.send();
    }
    retrn = function(err, dbres) {
      if (!err) {
        if (parseInt(dbres) === dbres) {
          dbres = dbres + "";
        }
        return res.send(dbres);
      } else {
        res.status(500);
        return res.send(err.toString());
      }
    };
    if (field != null) {
      args = [key, field];
    } else {
      args = [key];
    }
    if (req.query.args != null) {
      args.push.apply(args, req.query.args.split(','));
    }
    args.push(retrn);
    return db[c].apply(db, args);
  });

  POST_COMMANDS = ["APPEND", "SET", "LPUSH", "HSET"];

  app.post('/:command/:key', function(req, res) {
    var args, c, field, key, retrn, v, _ref;
    c = req.param("command");
    key = req.param("key");
    field = req.query.field;
    v = req.rawBody;
    if (_ref = c.toUpperCase(), __indexOf.call(POST_COMMANDS, _ref) < 0) {
      res.status(400).write("unsupported command");
      return res.send();
    }
    retrn = function(err, dbres) {
      if (!err) {
        return res.send("true");
      } else {
        res.status(500);
        return res.send(err.toString());
      }
    };
    if (field != null) {
      args = [key, field, v, retrn];
    } else {
      args = [key, v, retrn];
    }
    return db[c].apply(db, args);
  });

  module.exports.app = app;

}).call(this);
